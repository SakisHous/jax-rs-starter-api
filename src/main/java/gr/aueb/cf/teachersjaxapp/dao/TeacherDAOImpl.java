package gr.aueb.cf.teachersjaxapp.dao;

import gr.aueb.cf.teachersjaxapp.dao.exceptions.TeacherDAOException;
import gr.aueb.cf.teachersjaxapp.model.Teacher;
import gr.aueb.cf.teachersjaxapp.service.util.DBUtil;

import javax.enterprise.context.ApplicationScoped;
import javax.ws.rs.ext.Provider;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * This class implements the Public API of the
 * {@link ITeacherDAO} interface.
 *
 * @author Thanasis Chousiadas
 */
@Provider
@ApplicationScoped
public class TeacherDAOImpl implements ITeacherDAO {

    /**
     * This method inserts a new record in the Teachers table.
     *
     * @param teacher a {@link Teacher} object, to be inserted.
     * @return the inserted {@link Teacher} object.
     * @throws TeacherDAOException wrapper exception to {@link SQLException}
     *                             that is thrown if an error is occurred
     *                             during database operations.
     */
    @Override
    public Teacher insert(Teacher teacher) throws TeacherDAOException {
        String sql = "INSERT INTO TEACHERS (FIRSTNAME, LASTNAME) VALUES (?, ?)";
        long autoGeneratedId = 0;

        try (Connection connection = DBUtil.getConnection();
             PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            String firstname = teacher.getFirstname();
            String lastname = teacher.getLastname();

            ps.setString(1, firstname);
            ps.setString(2, lastname);

            int n = ps.executeUpdate();

            if (n >= 1) {
                ResultSet generatedKeys = ps.getGeneratedKeys();
                if (generatedKeys.next()) {
                    autoGeneratedId = generatedKeys.getLong(1);
                }

                Teacher insertedTeacher = new Teacher();
                insertedTeacher.setId(autoGeneratedId);
                insertedTeacher.setFirstname(firstname);
                insertedTeacher.setLastname(lastname);

                return insertedTeacher;
            }

            return null;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new TeacherDAOException("SQL Error in Teacher Insert " + teacher);
        }

    }

    /**
     * This method updates an old record in the Teachers table
     * with the new one.
     *
     * @param teacher a {@link Teacher} object.
     * @return the updated {@link Teacher} object.
     * @throws TeacherDAOException wrapper exception to {@link SQLException}
     *                             that is thrown if an error is occurred
     *                             during database operations.
     */
    @Override
    public Teacher update(Teacher teacher) throws TeacherDAOException {
        String sql = "UPDATE TEACHERS SET FIRSTNAME = ?, LASTNAME = ? WHERE ID = ?";

        try (Connection connection = DBUtil.getConnection();
             PreparedStatement ps = connection.prepareStatement(sql)) {

            Long id = teacher.getId();
            String firstname = teacher.getFirstname();
            String lastname = teacher.getLastname();

            ps.setString(1, firstname);
            ps.setString(2, lastname);
            ps.setLong(3, id);

            int n = ps.executeUpdate();

            if (n >= 1) {
                return teacher;
            } else {
                return null;
            }

        } catch (SQLException e) {
            e.printStackTrace();
            throw new TeacherDAOException("SQL Error in Teacher Update " + teacher);
        }
    }

    /**
     * This method deletes a record from the Teachers table,
     * where the primary key is equal to the id given by the
     * client.
     *
     * @param id the primary key given by the client.
     * @throws TeacherDAOException wrapper exception to {@link SQLException}
     *                             that is thrown if an error is occurred
     *                             during database operations.
     */
    @Override
    public void delete(long id) throws TeacherDAOException {
        String sql = "DELETE FROM TEACHERS WHERE ID = ?";

        try (Connection connection = DBUtil.getConnection();
             PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setLong(1, id);

            int n = ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new TeacherDAOException("SQL Error in Teacher Delete with id = " + id);
        }
    }

    /**
     * This method returns an {@link ArrayList} with the records
     * of the Teachers table where lastname begins with the parameter
     * provided by the client.
     *
     * @param lastname the lastname for searching given by the client.
     * @return an {@link ArrayList} of {@link Teacher} objects where
     * their lastname field begins with the lastname parameter
     * given by the client.
     * @throws TeacherDAOException wrapper exception to {@link SQLException}
     *                             that is thrown if an error is occurred
     *                             during database operations.
     */
    @Override
    public List<Teacher> getByLastname(String lastname) throws TeacherDAOException {
        String sql = "SELECT * FROM TEACHERS WHERE LASTNAME LIKE ?";
        List<Teacher> teachers = new ArrayList<>();
        ResultSet rs = null;

        try (Connection connection = DBUtil.getConnection();
             PreparedStatement ps = connection.prepareStatement(sql)) {

            ps.setString(1, lastname + "%");
            rs = ps.executeQuery();

            while (rs.next()) {
                Teacher teacher = new Teacher(rs.getLong("ID"), rs.getString("FIRSTNAME"), rs.getString("LASTNAME"));
                teachers.add(teacher);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            throw new TeacherDAOException("SQL Error no records found with lastname = " + lastname);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }

        return teachers;
    }

    /**
     * This method returns the record where the primary key is
     * the same with the id given by the client.
     *
     * @param id the id provided by the client.
     * @return a {@link Teacher} with the id.
     * @throws TeacherDAOException wrapper exception to {@link SQLException}
     *                             that is thrown if an error is occurred
     *                             during database operations.
     */
    @Override
    public Teacher getById(long id) throws TeacherDAOException {
        String sql = "SELECT * FROM TEACHERS WHERE ID = ?";
        Teacher teacher = null;
        ResultSet rs = null;

        try (Connection connection = DBUtil.getConnection();
             PreparedStatement ps = connection.prepareStatement(sql)) {

            ps.setLong(1, id);
            rs = ps.executeQuery();

            if (rs.next()) {
                teacher = new Teacher(rs.getLong("ID"), rs.getString("FIRSTNAME"), rs.getString("LASTNAME"));
            }

        } catch (SQLException e) {
            e.printStackTrace();
            throw new TeacherDAOException("SQL Error in Teacher Get with id = " + id);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }

        return teacher;
    }
}
